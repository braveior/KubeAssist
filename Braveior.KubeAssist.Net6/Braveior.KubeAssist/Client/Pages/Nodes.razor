@page "/nodes"

@using Braveior.KubeAssist.Services
@using Braveior.KubeAssist.Services.Models
@inject IKubernetesService KubernetesService

<MudTable Dense="true"  Items="@NodesList" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Kernel Version</MudTh>
        <MudTh>OS Image</MudTh>
        <MudTh>Container Runtime Version</MudTh>
        <MudTh>Kubelet Version</MudTh>
        <MudTh>Kube Proxy Version</MudTh>
        <MudTh>Created Date</MudTh>
        <MudTh>Memory</MudTh>
        <MudTh>No of Pods</MudTh>
        <MudTh>CPU Core</MudTh>
        <MudTh>Storage</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Metadata.Name</MudTd>
        <MudTd DataLabel="KernelVersion">@context.Status.NodeInfo.KernelVersion</MudTd>
        <MudTd DataLabel="OSImage">@context.Status.NodeInfo.OsImage</MudTd>
        <MudTd DataLabel="ContainerRuntimeVersion">@context.Status.NodeInfo.ContainerRuntimeVersion</MudTd>
        <MudTd DataLabel="KubeletVersion">@context.Status.NodeInfo.KubeletVersion</MudTd>
        <MudTd DataLabel="KubeProxyVersion">@context.Status.NodeInfo.KubeProxyVersion</MudTd>
        <MudTd DataLabel="CreatedDate">@context.Metadata.CreationTimestamp</MudTd>
        <MudTd DataLabel="Memory">@context.Status.Capacity["memory"]</MudTd>
        <MudTd DataLabel="NoOfPods">@context.Status.Capacity["pods"]</MudTd>
        <MudTd DataLabel="CPUCore">@context.Status.Capacity["cpu"]</MudTd>
        <MudTd DataLabel="Storage">@context.Status.Capacity["ephemeral-storage"]</MudTd>
    </RowTemplate>
 </MudTable>


@code
{

    protected override async Task OnInitializedAsync()
    {
        await LoadNodes();
        base.OnInitialized();
    }

    private async Task LoadNodes()
    {
        var nodes = await KubernetesService.GetNodes();
        if (nodes.Items != null)
        {
            NodesList = nodes.Items.ToList();
        }
        StateHasChanged();
        //if (KubeStateState.Value.KubeState != null)
        //{
        //    NodesList = KubeStateState.Value.KubeState.NodeDetails;
        //}

    }
    private static List<V1Node> NodesList { get; set; }


}
