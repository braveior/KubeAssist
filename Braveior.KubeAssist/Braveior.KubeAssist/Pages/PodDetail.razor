@page "/poddetail/{Name}"
@using System.Text;
@using ChartJs.Blazor.PieChart
@using Braveior.KubeAssist.Services
@using Braveior.KubeAssist.Services.Models
@using Braveior.KubeAssist.Pages
@inject KubernetesService KubernetesService
@inject IDialogService DialogService


<MudText Typo="Typo.h4">Pod Details</MudText>
@if (Pod.Metadata != null)
{
<MudGrid>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Metadata.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Metadata.NamespaceProperty" Label="Namespace" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Spec.NodeName" Label="Node Name" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>

    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Metadata.Uid" Label="UID" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Status.HostIP" Label="Host IP" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Status.PodIP" Label="Pod IP" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>

    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Metadata.CreationTimestamp" Label="Created Time" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Status.StartTime" Label="Start Time" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Status.StartTime" Label="Status" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>

    <MudItem lg="12">
        <MudButton Variant="Variant.Outlined" Size="MudBlazor.Size.Small" OnClick="@(() => ViewLogs(Pod.Name(), Pod.Namespace()))">Logs</MudButton>
    </MudItem>
    <MudItem lg="12">
        <MudText Typo="Typo.h4">CPU and Memory Trend</MudText>
    </MudItem>
    <MudItem lg="12">
        <MudButtonGroup Color="MudBlazor.Color.Primary" Variant="Variant.Outlined">
            <MudButton @onclick="GenerteMonthContainerChart">Month</MudButton>
            <MudButton @onclick="GenerteWeekContainerChart">Week</MudButton>
            <MudButton @onclick="GenerteDayContainerChart">Day</MudButton>
        </MudButtonGroup>
    </MudItem>
    <MudItem lg="6">
        <MudPaper Class="mt-16" Elevation="3">
            <Chart Config="configContainerCPU"></Chart>
        </MudPaper>
    </MudItem>
    <MudItem lg="6">
        <MudPaper Class="mt-16" Elevation="3">
            <Chart Config="configContainerMemory"></Chart>
        </MudPaper>
    </MudItem>
    <MudItem lg="12">
        <MudText Typo="Typo.h4">Labels</MudText>
    </MudItem>

   
</MudGrid>

}

@code
{
    [Parameter]
    public string Name { get; set; }

    private V1Pod Pod { get; set; } = new V1Pod();

    private LineConfig configContainerCPU;

    private LineConfig configContainerMemory;

    Queue<System.Drawing.Color> SysColors { get; set; } = new Queue<System.Drawing.Color>();

    private void BuildSysColorsQueue()
    {
        SysColors.Enqueue(System.Drawing.Color.Red);
        SysColors.Enqueue(System.Drawing.Color.Blue);
        SysColors.Enqueue(System.Drawing.Color.Green);
        SysColors.Enqueue(System.Drawing.Color.Orange);
        SysColors.Enqueue(System.Drawing.Color.Violet);
        SysColors.Enqueue(System.Drawing.Color.Black);
        SysColors.Enqueue(System.Drawing.Color.Aqua);
        SysColors.Enqueue(System.Drawing.Color.Chocolate);
        SysColors.Enqueue(System.Drawing.Color.Turquoise);
    }

    protected override void OnInitialized()
    {

        BuildSysColorsQueue();
        LoadPod();
        configContainerCPU = GetLineChartConfig("Container CPU Trend");
        configContainerMemory = GetLineChartConfig("Container Memory Trend");
        GenerateContainerCharts("7");
        base.OnInitialized();
    }
    private async Task LoadPod()
    {
        Pod = await KubernetesService.GetPod(Name, "default");
        StateHasChanged();

        //if (KubeStateState.Value.KubeState != null)
        //{
        //    Pod = KubeStateState.Value.KubeState.Pods.Where(a => a.UID.Equals(UID)).FirstOrDefault();
        //}
    }

    private void GenerteMonthContainerChart()
    {
        GenerateContainerCharts("30");
    }
    private void GenerteWeekContainerChart()
    {
        GenerateContainerCharts("7");
    }
    private void GenerteDayContainerChart()
    {
        GenerateContainerCharts("2");
    }
    private void GenerateContainerCharts(string day)
    {
        configContainerCPU.Data.Datasets.Clear();
        configContainerMemory.Data.Datasets.Clear();
        var metricResult = KubernetesService.GetPodMetricResult(Pod.Name(), day);

        var datasetCpu = new LineDataset<double>
            ()
        {
            Label = Pod.Name(),
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, GetNextSystemColor())),
            BorderColor = ColorUtil.FromDrawingColor(GetNextSystemColor()),
            BorderWidth = 1,
            Fill = FillingMode.Disabled
        };
        var datasetMemory = new LineDataset<double>
            ()
        {
            Label = Pod.Name(),
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, GetNextSystemColor())),
            BorderColor = ColorUtil.FromDrawingColor(GetNextSystemColor()),
            BorderWidth = 1,
            Fill = FillingMode.Disabled
        };
        var metrics = metricResult.aggregations.sales_over_time.buckets;
        configContainerCPU.Data.Labels.Clear();
        configContainerMemory.Data.Labels.Clear();
        foreach (var metric in metrics)
        {
            datasetCpu.Add(metric.avg_cpu.value);
            datasetMemory.Add(metric.avg_ram.value);
            configContainerCPU.Data.Labels.Add(metric.key_as_string.ToShortDateString());
            configContainerMemory.Data.Labels.Add(metric.key_as_string.ToShortDateString());
        }
        configContainerCPU.Data.Datasets.Add(datasetCpu);
        configContainerMemory.Data.Datasets.Add(datasetMemory);

    }
    private System.Drawing.Color GetNextSystemColor()
    {
        var color = SysColors.Dequeue();
        SysColors.Enqueue(color);
        return color;
    }
    private LineConfig GetLineChartConfig(string header)
    {

        var config = new LineConfig()
        {
            Options = new LineOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = ChartJs.Blazor.Common.Enums.Position.Top

                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = header
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
{
                    new CategoryAxis
                    {
                    ScaleLabel = new ScaleLabel
                    {
                    LabelString = "Day"
                    }
                    }
                    },
                    YAxes = new List<CartesianAxis>
{
                        new LinearCartesianAxis
                        {
                        ScaleLabel = new ScaleLabel
                        {
                        LabelString = "Value"
                        }
                        }
                        }
                }
            }
        };
        return config;
    }
    private string GetPodStatus(V1Pod pod)
    {
        if (pod.Status.ContainerStatuses[0].State.Running != null)
            return "Running";
        else if (pod.Status.ContainerStatuses[0].State.Terminated != null)
            return "Terminated";
        else if (pod.Status.ContainerStatuses[0].State.Waiting != null)
            return "Waiting";
        else
            return "UnKnown";
    }
    private void ViewLogs(string name, string ns)
    {
        var logs = KubernetesService.GetPodLogs(name, ns).Result;
        //PodList = kubeState.Pods.Where(a => a.Readiness == "false");
        var parameters = new DialogParameters { ["LogText"] = logs };
        DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<LogView>("Delete Server", parameters, dialogOptions);
    }
}