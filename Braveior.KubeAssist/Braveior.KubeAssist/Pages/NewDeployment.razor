@page "/newdep"
<MudGrid>
    <MudItem lg="6">
        <MudItem lg="12">
            <div Class="d-flex flex-row py-2 px-1">
                <MudTextField @bind-Value="Deployment.ApiVersion" Label="API Version" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>

                <MudTextField @bind-Value="Deployment.Kind" Label="Kind" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
            </div>
        </MudItem>
        <MudItem lg="12">
            <MudText Typo="Typo.h6">Metadata</MudText>
        </MudItem>
        <MudItem lg="12">
            <MudTextField @bind-Value="Deployment.Metadata.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
        </MudItem>
        <MudItem lg="12">
            <MudText Typo="Typo.h6">Spec</MudText>
        </MudItem>
        <MudItem lg="12">
            <div Class="d-flex flex-row py-2 px-1">
                <MudTextField @bind-Value="Deployment.Spec.Replicas" Label="Replicas" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>

                <MudTextField @bind-Value="Deployment.Spec.RevisionHistoryLimit" Label="Revision History Limit" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
            </div>
        </MudItem>
        <MudItem lg="6">
            <MudText Typo="Typo.h6">Spec.Selector</MudText>
        </MudItem>
        <MudItem lg="6">
            <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="AddSelectorLabels" Margin="Margin.Dense"></MudIconButton>
        </MudItem>
        @foreach (var label in SelectorLabels)
        {
            <div Class="d-flex flex-row py-2 px-1">

                <MudTextField @bind-Value="label.Name" @onchange="SelectorLabelsChange" Label="Name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                <MudTextField @bind-Value="label.Value" @onchange="SelectorLabelsChange" Label="Value" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
            </div>
        }
        <MudItem lg="12">
            <MudText Typo="Typo.h6">Spec.Template</MudText>
        </MudItem>
        <MudItem lg="12">
            <MudText Typo="Typo.h6">Spec.Template.MetaData.Labels</MudText>
        </MudItem>
        <MudItem lg="12">
            <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="AddTemplateMetadataLabels" Margin="Margin.Dense"></MudIconButton>
        </MudItem>
        @foreach (var label in TemplateMetadataLabels)
        {
            <div Class="d-flex flex-row py-2 px-1">
                <MudTextField @bind-Value="label.Name" @onchange="TemplateMetadataLabelsChange" Label="Name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>

                <MudTextField @bind-Value="label.Value" @onchange="TemplateMetadataLabelsChange" Label="Value" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
            </div>
        }
        <MudItem lg="12">
            <MudText Typo="Typo.h6">Spec.Template.Spec.Containers</MudText>
        </MudItem>
        <MudItem lg="12">
            <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="AddContainers"></MudIconButton>
        </MudItem>
        @foreach (var label in Deployment.Spec.Template.Spec.Containers)
        {
            <div Class="d-flex flex-row py-2 px-1">
                <MudTextField @bind-Value="label.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                
                    <MudTextField @bind-Value="label.Image" Label="Image" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                </div>
            }
        <MudItem lg="12">
            <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="TestDeployment"></MudIconButton>
        </MudItem>
       </MudItem>
    <MudItem lg="6">
        <div class="editorContent">
            <MonacoEditorYaml @ref="_yamlEditor" Id="monacoEditorYaml" Value="YamlText" CssClass="editor" />
        </div>
    </MudItem>
</MudGrid>



            @code
{
                private MonacoEditorYaml _yamlEditor { get; set; }

                private string YamlText { get; set; }

                private V1Deployment Deployment { get; set; } = new V1Deployment();

                private List<Label> SelectorLabels { get; set; } = new List<Label>();
                private List<Label> TemplateMetadataLabels { get; set; } = new List<Label>();

                private List<V1Container> Containers { get; set; } = new List<V1Container>();

                protected override async Task OnInitializedAsync()
                {
                    Deployment.ApiVersion = "v1";
                    Deployment.Kind = "test";
                    Deployment.Metadata = new V1ObjectMeta();
                    Deployment.Metadata.Name = "ssdfff";
                    Deployment.Spec = new V1DeploymentSpec();
                    Deployment.Spec.Replicas = 3;
                    Deployment.Spec.RevisionHistoryLimit = 4;
                    //Deployment.Spec.Selector = new V1LabelSelector();
                    //Deployment.Spec.Selector.MatchLabels = new Dictionary<string, string>();
                    Deployment.Spec.Template = new V1PodTemplateSpec();
                    Deployment.Spec.Template.Metadata = new V1ObjectMeta();
                    //Deployment.Spec.Template.Metadata.Labels = new Dictionary<string, string>();
                    Deployment.Spec.Template.Spec = new V1PodSpec();
                    Deployment.Spec.Template.Spec.Containers = new List<V1Container>();


                }
                private void AddSelectorLabels()
                {
                    SelectorLabels.Add(new Label());
                }
                private void AddTemplateMetadataLabels()
                {
                    TemplateMetadataLabels.Add(new Label());
                }
                private void AddContainers()
                {
                    Deployment.Spec.Template.Spec.Containers.Add(new V1Container() { Ports = new List<V1ContainerPort>()  });
                }

                private void TestDeployment()
                {
                    SelectorLabelsChange();
                    TemplateMetadataLabelsChange();
                    //var serializer = new SerializerBuilder().ConfigureDefaultValuesHandling(DefaultValuesHandling.OmitNull).ConfigureDefaultValuesHandling(DefaultValuesHandling.OmitDefaults).Build();
                    var serializer = new SerializerBuilder().ConfigureDefaultValuesHandling(DefaultValuesHandling.OmitNull).WithNamingConvention(new YamlDotNet.Serialization.NamingConventions.CamelCaseNamingConvention()).WithEmissionPhaseObjectGraphVisitor(args => new YamlIEnumerableSkipEmptyObjectGraphVisitor(args.InnerVisitor)).Build();
                    _yamlEditor.SetValue(serializer.Serialize(Deployment));

                }
                private void SelectorLabelsChange()
                {
                    if (SelectorLabels.Count>0 && Deployment.Spec.Selector == null)
                    {
                        Deployment.Spec.Selector = new V1LabelSelector();
                        Deployment.Spec.Selector.MatchLabels = new Dictionary<string, string>();
                        foreach (var label in SelectorLabels)
                        {
                            Deployment.Spec.Selector.MatchLabels.Add(label.Name, label.Value);
                        }
                    }
                    else
                    {
                        Deployment.Spec.Selector = null;
                        //Deployment.Spec.Selector.MatchLabels.Clear();
                    }
                    //Deployment.Spec.Selector.MatchLabels.Clear();

                }
                private void TemplateMetadataLabelsChange()
                {
                    Deployment.Spec.Template.Metadata.Labels = new Dictionary<string, string>();
                    //Deployment.Spec.Template.Metadata.Labels.Clear();
                    foreach (var label in TemplateMetadataLabels)
                    {
                        Deployment.Spec.Template.Metadata.Labels.Add(label.Name, label.Value);
                    }
                }

            }
