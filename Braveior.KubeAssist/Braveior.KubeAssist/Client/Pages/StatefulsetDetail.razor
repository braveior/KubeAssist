@page "/statefulsetdetail/{name}"

@using Braveior.KubeAssist.Services
@using Braveior.KubeAssist.Services.Models
@inject IKubernetesService KubernetesService
@inject IDialogService DialogService

<MudText Typo="Typo.h6">Statefulset Details</MudText>
@if (Statefulset.Metadata != null)
{
<MudGrid>
    <MudItem lg="4">
        <MudTextField @bind-Value="Statefulset.Metadata.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Statefulset.Metadata.NamespaceProperty" Label="Namespace" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Statefulset.Status.Replicas" Label="No of Replicas" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>

    <MudItem lg="3">
        <MudTextField @bind-Value="Statefulset.Status.CurrentReplicas" Label="Current Replicas" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="3">
        <MudTextField @bind-Value="Statefulset.Status.ReadyReplicas" Label="Ready Replicas" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="3">
        <MudTextField @bind-Value="Statefulset.Status.UpdatedReplicas" Label="Updated Replicas" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>

    <MudItem lg="3">
        <MudTextField @bind-Value="Statefulset.Metadata.CreationTimestamp" Label="Created Date" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>




    <MudItem lg="12">
        <MudText Typo="Typo.h6">Labels</MudText>
    </MudItem>
    <MudItem lg="12">
        <div Class="d-flex flex-row py-2 px-1">
            <MudChipSet Filter="true" SelectedChipChanged="MatchPods">
                @if (Statefulset.Metadata.Labels != null)
                {
                    @foreach (var label in Statefulset.Metadata.Labels)
                    {
                        <MudChip Text="@(label.Key + "|" + label.Value)" Color="Color.Primary" Variant="Variant.Outlined" Size="MudBlazor.Size.Medium"></MudChip>
                    }
                }
            </MudChipSet>
        </div>
    </MudItem>


    <MudItem lg="12">
        <MudText Typo="Typo.h6">Label Matching Pods</MudText>
    </MudItem>
    <MudItem lg="12">
        <MudTable Dense="true" Items="@PodList" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Namespace</MudTh>
                <MudTh>UID</MudTh>
                <MudTh>PodIP</MudTh>
                <MudTh>StartTime</MudTh>
                <MudTh>CreatedTime</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Metadata.Name</MudTd>
                <MudTd DataLabel="Namespace">@context.Metadata.NamespaceProperty</MudTd>
                <MudTd DataLabel="UID">@context.Metadata.Uid</MudTd>
                <MudTd DataLabel="PodIP">@context.Status.PodIP</MudTd>
                <MudTd DataLabel="StartTime">@context.Status.StartTime</MudTd>
                <MudTd DataLabel="CreatedTime">@context.Metadata.CreationTimestamp</MudTd>
            </RowTemplate>

        </MudTable>
    </MudItem>

</MudGrid>

}

    @code
{
        [Parameter]
        public string Name { get; set; }

        private V1StatefulSet Statefulset { get; set; } = new V1StatefulSet();

        private List<V1Pod> PodList { get; set; } = new List<V1Pod>();

        protected override async Task OnInitializedAsync()
        {
            await LoadStatefulsetDetail();
            base.OnInitialized();
        }
        private async Task LoadStatefulsetDetail()
        {
            Statefulset = await KubernetesService.GetStatefulSet(Name, "default");

            StateHasChanged();
        }
        public async Task MatchPods(MudChip SelectedLabel)
        {
            if (SelectedLabel != null && SelectedLabel.Text != null)
            {
                var pods = await KubernetesService.GetPods("default");
                PodList = pods.Items.Where(a => a.Metadata.Labels.Any(b => CheckLabel(b.Key, b.Value, SelectedLabel.Text.Split("|")[0], SelectedLabel.Text.Split("|")[1]))).ToList();
            }
        }


        private bool CheckLabel(string plname, string plvalue, string dlname, string dlvalue)
        {
            if (plname.Equals(dlname) && plvalue.Equals(dlvalue))
                return true;
            else
                return false;
        }


    }
