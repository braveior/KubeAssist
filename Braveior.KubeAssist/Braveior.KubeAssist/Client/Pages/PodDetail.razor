@page "/poddetail/{Name}"
@using System.Text;
@using ChartJs.Blazor.PieChart
@using Braveior.KubeAssist.Services
@using Braveior.KubeAssist.Services.Models
@using Braveior.KubeAssist.Pages
@inject IKubernetesService KubernetesService
@inject IDialogService DialogService


<MudText Typo="Typo.h6">Pod Details</MudText>
@if (Pod.Metadata != null)
{
<MudGrid>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Metadata.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Metadata.NamespaceProperty" Label="Namespace" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Spec.NodeName" Label="Node Name" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>

    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Metadata.Uid" Label="UID" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Status.HostIP" Label="Host IP" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Status.PodIP" Label="Pod IP" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>

    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Metadata.CreationTimestamp" Label="Created Time" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Status.StartTime" Label="Start Time" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>
    <MudItem lg="4">
        <MudTextField @bind-Value="Pod.Status.StartTime" Label="Status" Variant="Variant.Text" Margin="Margin.Dense" />
    </MudItem>

    <MudItem lg="12">
        <MudButton Variant="Variant.Outlined" Size="MudBlazor.Size.Small" OnClick="@(() => ViewLogs(Pod.Metadata.Name, Pod.Metadata.NamespaceProperty))">Logs</MudButton>
    </MudItem>
    <MudItem lg="12">
        <MudText Typo="Typo.h6">CPU and Memory Trend</MudText>
    </MudItem>
    <MudItem lg="12">
        <MudButtonGroup Color="MudBlazor.Color.Primary" Variant="Variant.Outlined">
            <MudButton @onclick="GenerateMonthContainerChart">Month</MudButton>
            <MudButton @onclick="GenerateWeekContainerChart">Week</MudButton>
            <MudButton @onclick="GenerateDayContainerChart">Day</MudButton>
        </MudButtonGroup>
    </MudItem>
    <MudItem lg="6">
        <MudPaper Class="mt-16" Elevation="3">
            <Chart Config="configContainerCPU"></Chart>
        </MudPaper>
    </MudItem>
    <MudItem lg="6">
        <MudPaper Class="mt-16" Elevation="3">
            <Chart Config="configContainerMemory"></Chart>
        </MudPaper>
    </MudItem>
    <MudItem lg="12">
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
            <MudTabPanel Text="Labels">
                @*<MudItem lg="12">
                        <MudText Typo="Typo.h6">Labels</MudText>
                    </MudItem>*@
                <MudItem lg="12">
                    <div Class="d-flex flex-row flex-wrap py-2 px-1">
                        @foreach (var label in Pod.Metadata.Labels)
                        {
                            <MudChip Color="Color.Primary" Variant="Variant.Outlined" Size="MudBlazor.Size.Medium">@label.Key | @label.Value</MudChip>
                        }
                    </div>
                </MudItem>
            </MudTabPanel>
            <MudTabPanel Text="Pod Conditions">
                @*<MudItem lg="12">
                        <MudText Typo="Typo.h6">Pod Conditions</MudText>
                    </MudItem>*@
                <MudItem lg="12">
                    <MudTable Dense="true" Items="@PodConditions" Hover="true" Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh>Type</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Reason</MudTh>
                            <MudTh>Message</MudTh>
                            <MudTh>Last Transition Time</MudTh>
                            <MudTh>Last Probe Time</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Type">@context.Type</MudTd>
                            <MudTd DataLabel="Status">@context.Status</MudTd>
                            <MudTd DataLabel="Reason">@context.Reason</MudTd>
                            <MudTd DataLabel="Message">@context.Message</MudTd>
                            <MudTd DataLabel="LastTransitionTime">@context.LastTransitionTime</MudTd>
                            <MudTd DataLabel="LastProbeTime">@context.LastProbeTime</MudTd>
                        </RowTemplate>

                    </MudTable>
                </MudItem>
            </MudTabPanel>
            <MudTabPanel Text="Containers">
                @foreach (var container in Pod.Spec.Containers)
                {
                    <MudItem lg="12">
                        <MudText Typo="Typo.h6">Container - @container.Name</MudText>
                    </MudItem>
                    <MudItem lg="6">
                        <MudTextField @bind-Value="container.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense" />
                    </MudItem>
                    @*<MudItem lg="3">
                            <MudTextField @bind-Value="container.ContainerId" Label="Id" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudItem>*@
                    @*<MudItem lg="4">
                            <MudTextField @bind-Value="container.Readiness" Label="Readiness" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudItem>*@
                    <MudItem lg="6">
                        <MudTextField @bind-Value="container.Image" Label="Image" Variant="Variant.Text" Margin="Margin.Dense" />
                    </MudItem>
                    @*<MudItem lg="4">
                            <MudTextField @bind-Value="container.ImageId" Label="Image Id" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudItem>*@
                    @*<MudItem lg="4">
                            <MudTextField @bind-Value="Pod.Status.ContainerStatuses.Where(c=>c.Name==container.Name).FirstOrDefault()." Label="Status" Variant="Variant.Text" Margin="Margin.Dense" />
                        </MudItem>*@

                    <MudItem lg="12">
                        <MudText Typo="Typo.h6">Resource Requests and Limits</MudText>
                    </MudItem>
                    if (container.Resources != null && container.Resources.Requests != null)
                    {
                        <MudItem lg="3">
                            <MudPaper Class="mt-16" Elevation="1">
                                <MudText Align="Align.Center" Typo="Typo.subtitle1">CPU Request</MudText>
                                <MudText Align="Align.Center" Typo="Typo.subtitle2">@container.Resources.Requests["cpu"]</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem lg="3">
                            <MudPaper Class="mt-16" Elevation="1">
                                <MudText Align="Align.Center" Typo="Typo.subtitle1">Memory Request</MudText>
                                <MudText Align="Align.Center" Typo="Typo.subtitle2">@container.Resources.Requests["memory"]</MudText>
                            </MudPaper>
                        </MudItem>
                    }
                    if (container.Resources != null && container.Resources.Limits != null)
                    {
                        <MudItem lg="3">
                            <MudPaper Class="mt-16" Elevation="1">
                                <MudText Align="Align.Center" Typo="Typo.subtitle1">CPU Limit</MudText>
                                <MudText Align="Align.Center" Typo="Typo.subtitle2">@container.Resources.Limits["cpu"]</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem lg="3">
                            <MudPaper Class="mt-16" Elevation="1">
                                <MudText Align="Align.Center" Typo="Typo.subtitle1">Memory Limit</MudText>
                                <MudText Align="Align.Center" Typo="Typo.subtitle2">@container.Resources.Limits["memory"]</MudText>
                            </MudPaper>
                        </MudItem>
                    }
                    <MudItem lg="12">
                        <MudText Typo="Typo.h6">Environment Variables</MudText>
                    </MudItem>
                    <MudItem lg="12">
                        <div Class="d-flex flex-row flex-wrap py-2 px-1">
                            @foreach (var env in container.Env)
                            {
                                <MudChip Color="Color.Primary" Variant="Variant.Outlined" Size="MudBlazor.Size.Medium">@env.Name | @env.Value</MudChip>
                            }
                        </div>
                    </MudItem>
                    <MudDivider />

                }
            </MudTabPanel>
        </MudTabs>
        </MudItem>
</MudGrid>

}

@code
{
    [Parameter]
    public string Name { get; set; }

    private V1Pod Pod { get; set; } = new V1Pod();

    private List<V1PodCondition> PodConditions { get; set; } = new List<V1PodCondition>();

    private LineConfig configContainerCPU = new LineConfig();

    private LineConfig configContainerMemory = new LineConfig();

    Queue<System.Drawing.Color> SysColors { get; set; } = new Queue<System.Drawing.Color>();

    private void BuildSysColorsQueue()
    {
        SysColors.Enqueue(System.Drawing.Color.Red);
        SysColors.Enqueue(System.Drawing.Color.Blue);
        SysColors.Enqueue(System.Drawing.Color.Green);
        SysColors.Enqueue(System.Drawing.Color.Orange);
        SysColors.Enqueue(System.Drawing.Color.Violet);
        SysColors.Enqueue(System.Drawing.Color.Black);
        SysColors.Enqueue(System.Drawing.Color.Aqua);
        SysColors.Enqueue(System.Drawing.Color.Chocolate);
        SysColors.Enqueue(System.Drawing.Color.Turquoise);
    }

    protected override async Task OnInitializedAsync()
    {

        BuildSysColorsQueue();
        configContainerCPU = GetLineChartConfig("Container CPU Trend");
        configContainerMemory = GetLineChartConfig("Container Memory Trend");
        await LoadPod();
        await GenerateContainerCharts("7");
        StateHasChanged();
        await base.OnInitializedAsync();
    }
    private async Task LoadPod()
    {
        Pod = await KubernetesService.GetPod(Name, "default");
        PodConditions = Pod.Status.Conditions.ToList();
        StateHasChanged();

    }

    private async Task GenerateMonthContainerChart()
    {
        await GenerateContainerCharts("30");
    }
    private async Task GenerateWeekContainerChart()
    {
        await GenerateContainerCharts("7");
    }
    private async Task GenerateDayContainerChart()
    {
        await GenerateContainerCharts("2");
    }
    private async Task GenerateContainerCharts(string day)
    {
        configContainerCPU.Data.Datasets.Clear();
        configContainerMemory.Data.Datasets.Clear();
        var metricResult = await KubernetesService.GetPodMetricResult(Pod.Metadata.Name, day);

        var datasetCpu = new LineDataset<double>()
        {
            Label = Pod.Name(),
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, GetNextSystemColor())),
            BorderColor = ColorUtil.FromDrawingColor(GetNextSystemColor()),
            BorderWidth = 1,
            Fill = FillingMode.Disabled
        };
        var datasetMemory = new LineDataset<double>()
        {
            Label = Pod.Name(),
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, GetNextSystemColor())),
            BorderColor = ColorUtil.FromDrawingColor(GetNextSystemColor()),
            BorderWidth = 1,
            Fill = FillingMode.Disabled
        };
        if (metricResult!=null && metricResult.aggregations != null)
        {
            var metrics = metricResult.aggregations.sales_over_time.buckets;
            configContainerCPU.Data.Labels.Clear();
            configContainerMemory.Data.Labels.Clear();
            foreach (var metric in metrics)
            {
                datasetCpu.Add(metric.avg_cpu.value);
                datasetMemory.Add(metric.avg_ram.value);
                configContainerCPU.Data.Labels.Add(metric.key_as_string.ToShortDateString());
                configContainerMemory.Data.Labels.Add(metric.key_as_string.ToShortDateString());
            }
            configContainerCPU.Data.Datasets.Add(datasetCpu);
            configContainerMemory.Data.Datasets.Add(datasetMemory);
        }

    }
    private System.Drawing.Color GetNextSystemColor()
    {
        var color = SysColors.Dequeue();
        SysColors.Enqueue(color);
        return color;
    }
    private LineConfig GetLineChartConfig(string header)
    {

        var config = new LineConfig()
        {
            Options = new LineOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = ChartJs.Blazor.Common.Enums.Position.Top

                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = header
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
{
                    new CategoryAxis
                    {
                    ScaleLabel = new ScaleLabel
                    {
                    LabelString = "Day"
                    }
                    }
                    },
                    YAxes = new List<CartesianAxis>
{
                        new LinearCartesianAxis
                        {
                        ScaleLabel = new ScaleLabel
                        {
                        LabelString = "Value"
                        }
                        }
                        }
                }
            }
        };
        return config;
    }
    private string GetPodStatus(V1Pod pod)
    {
        if (pod.Status.ContainerStatuses[0].State.Running != null)
            return "Running";
        else if (pod.Status.ContainerStatuses[0].State.Terminated != null)
            return "Terminated";
        else if (pod.Status.ContainerStatuses[0].State.Waiting != null)
            return "Waiting";
        else
            return "UnKnown";
    }
    private async Task ViewLogs(string name, string ns)
    {
        var logs = await KubernetesService.GetPodLogs(name, ns);
        var parameters = new DialogParameters { ["LogText"] = logs };
        DialogOptions dialogOptions = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = DialogService.Show<LogView>("Delete Server", parameters, dialogOptions);
    }
}