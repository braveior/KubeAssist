@page "/nodes"

@using Braveior.KubeAssist.Services
@using Braveior.KubeAssist.Services.Models
@inject IKubernetesService KubernetesService
@inject NavigationManager NavigationManager

<MudTable Dense="true" Items="@NodesList" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Created Date</MudTh>
        <MudTh>Memory</MudTh>
        <MudTh>No of Pods</MudTh>
        <MudTh>CPU Core</MudTh>
        <MudTh>Storage</MudTh>
        <MudTh>Memory Pressure</MudTh>
        <MudTh>Disk Pressure</MudTh>
        <MudTh>PID Pressure</MudTh>
        <MudTh>Ready</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd><MudButton Variant="Variant.Outlined" Size="MudBlazor.Size.Small" OnClick="@(() => NavigateNodeDetails(@context.Metadata.Name))">Details</MudButton></MudTd>
        <MudTd DataLabel="Name">@context.Metadata.Name</MudTd>
        <MudTd DataLabel="CreatedDate">@context.Metadata.CreationTimestamp</MudTd>
        <MudTd DataLabel="Memory">@GetMemoryinMib(context.Status.Capacity["memory"])</MudTd>
        <MudTd DataLabel="NoOfPods">@context.Status.Capacity["pods"]</MudTd>
        <MudTd DataLabel="CPUCore">@context.Status.Capacity["cpu"]</MudTd>
        <MudTd DataLabel="Storage">@GetMemoryinMib(context.Status.Capacity["ephemeral-storage"])</MudTd>
        <MudTd DataLabel="MemoryPressure">
            @if (HasMemoryPressure(context.Status.Conditions) == false)
            {
            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
            else
            {
            <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
            }
        </MudTd>
        <MudTd DataLabel="DiskPressure">
            @if (HasDiskPressure(context.Status.Conditions) == false)
            {
            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
            else
            {
            <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
            }
        </MudTd>
        <MudTd DataLabel="PIDPressure">
            @if (HasPIDPressure(context.Status.Conditions) == false)
            {
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
            }
        </MudTd>
        <MudTd DataLabel="Ready">
            @if (ISReady(context.Status.Conditions) == true)
            {
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
            }
        </MudTd>

    </RowTemplate>
</MudTable>


@code
{

    protected override async Task OnInitializedAsync()
    {
        await LoadNodes();
        base.OnInitialized();
    }

    private async Task LoadNodes()
    {
        var nodes = await KubernetesService.GetNodes();
        if (nodes.Items != null)
        {
            NodesList = nodes.Items.ToList();
        }
        StateHasChanged();
    }
    private string GetMemoryinMib(ResourceQuantity val)
    {
        return $"{Int64.Parse(val.CanonicalizeString().Replace("Ki", "")) / 1024} Mib";
    }
    private static List<V1Node> NodesList { get; set; }
    private void NavigateNodeDetails(string name)
    {
        NavigationManager.NavigateTo($"/Nodedetail/{name}");
    }
    private bool HasMemoryPressure(IList<V1NodeCondition> conditions)
    {
        if (conditions.Where(a => a.Type == "MemoryPressure").FirstOrDefault().Status == "True")
        {
            return true;
        }
        else
            return false;
    }
    private bool HasDiskPressure(IList<V1NodeCondition> conditions)
    {
        if (conditions.Where(a => a.Type == "DiskPressure").FirstOrDefault().Status == "True")
        {
            return true;
        }
        else
            return false;
    }
    private bool HasPIDPressure(IList<V1NodeCondition> conditions)
    {
        if (conditions.Where(a => a.Type == "PIDPressure").FirstOrDefault().Status == "True")
        {
            return true;
        }
        else
            return false;
    }
    private bool ISReady(IList<V1NodeCondition> conditions)
    {
        if (conditions.Where(a => a.Type == "Ready").FirstOrDefault().Status == "True")
        {
            return true;
        }
        else
            return false;
    }


}
